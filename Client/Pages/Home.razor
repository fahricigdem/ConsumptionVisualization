@page "/"
@using GasCounter.Models
@using System.Collections.Generic
@using GasCounter.Utilities

@inject DataAccess DataAccess

<div class="container mt-5">
    <div class="card">
        <div class="card-header">
            <h5>Gaz Sayacı Okuma Ekle</h5>
        </div>
        <div class="card-body">
            <EditForm Model="@gasReading" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group mt-1">
                    <label for="date">Tarih:</label>
                    <InputDate id="date" class="form-control" @bind-Value="gasReading.Date" />
                </div>
                <div class="form-group mt-1">
                    <label for="value">Okunan Değer:</label>
                    <InputNumber id="value" class="form-control" @bind-Value="gasReading.Value" />
                </div>
                <button type="submit" class="btn btn-primary mt-2">Kaydet</button>
            </EditForm>
        </div>
    </div>

    <h5 class="mt-5">Gaz Okumaları</h5>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Tarih</th>
                <th>Okunan</th>
                <th>Harcanan</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var reading in gasReadings.OrderByDescending(g => g.Date))
            {
                <tr>
                    <td>@reading.Date.ToString("dd.MM.yyyy")</td>
                    <td>@reading.Value </td>
                    <td>@(reading.Value - gasReadings[0].Value) </td>
                    <td><button class="btn btn-sm btn-danger" @onclick="()=>DeleteReading(reading)">Sil</button></td>
                </tr>
            }
        </tbody>
    </table>
    @if (calculated)
    {
        <div class="alert alert-info">
        <h3>Gaz Kullanım Bilgisi</h3>
            <p><strong>Kullanılan Gaz:</strong> @UsedGas m³ (@PastDays gün : Ort: @Math.Round(AverageUsedMeterValuePerDay, 2))</p>
            <p><strong>Kalan Gaz:</strong> @RemainingGas m³ (@RemainingDays gün : Ort: @Math.Round(AverageRemainingMeterValuePerDay, 2))</p>
            Harcanan Gaz %
            <div class="progress">
                <div class="progress-bar" role="progressbar" style="width: @(Math.Round(GasUsage.AnnualLimit == 0 ? 0 : UsedGas * 100 / GasUsage.AnnualLimit, 0))%" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
            <div class="progress">
                <div class="progress-bar" role="progressbar" style="width: @(TotalDays == 0 ? 0 : PastDays * 100 / TotalDays)%; " aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
            Gecen Gün %

            <hr />
            <p><strong>Sözlesmedeki Limit:</strong> @MaxMeterValue m³ (@GasUsage.LastDate.ToString("dd.MM.yyyy"))</p>
        </div>
    }


    <br /><hr />


    <div class="form-group">
        <label for="annualLimit">Sözlesmedeki Son Tarih:</label>
        <InputDate id="lastDate" class="form-control" @bind-Value="GasUsage.LastDate" />

    </div>
    <div class="form-group">
        <label for="annualLimit">Yıllık Kullanım Limiti (m³):</label>
        <InputNumber id="annualLimit" class="form-control" @bind-Value="GasUsage.AnnualLimit" />
    </div>

    <div class="form-group mt-2">
        <button class="btn btn-success" @onclick="SaveAgreementDataToLocalStorage">Kaydet</button>
    </div>
</div>




<br>
<p class="text-center"> v.1.0.0 </p>


@code {
    private List<GasReading> gasReadings = new List<GasReading>();
    private GasReading gasReading = new GasReading();

    protected override async Task OnInitializedAsync()
    {
        gasReading.Date = DateTime.Today;
        GasUsage.AnnualLimit = 500;
        GasUsage.LastDate = new DateTime(2024, 1, 1);
        await LoadFromLocalStorage();

    }

    private async Task DeleteReading(GasReading reading)
    {
        gasReadings.Remove(reading);
        await SaveGasReadingToLocalStorage();

    }

    private async Task HandleValidSubmit()
    {
        GasReading inputValues = new()
            {
                Date = gasReading.Date,
                Value = gasReading.Value
            };

        GasReading sameDate = gasReadings.FirstOrDefault(gr => gr.Date == inputValues.Date);
        if (sameDate != null)
        {
            gasReadings.Remove(sameDate);
        }

        if (gasReadings.Count>0 && inputValues.Value < gasReadings.Last().Value)
        {
            return;
        }

        gasReadings.Add(inputValues);
        await SaveGasReadingToLocalStorage();

        gasReading = new GasReading();
        gasReading.Date = DateTime.Today;
        await InvokeAsync(StateHasChanged);


    }

    private async Task SaveGasReadingToLocalStorage()
    {
        await DataAccess.SaveDataAsync(Constants.GasReadingsKey, gasReadings.OrderBy(g => g.Date));
        await LoadFromLocalStorage();
    }

    #region 
    private GasUsageData GasUsage { get; set; } = new GasUsageData();

    // Kullanıcı girdileri için bir nesne
    private decimal CurrentReading { get; set; }
    private decimal InitialReading { get; set; }

    // Hesaplanan veriler
    private decimal UsedGas { get; set; }
    private decimal MaxMeterValue { get; set; }
    private decimal AverageUsedMeterValuePerDay { get; set; }
    private decimal AverageRemainingMeterValuePerDay { get; set; }
    private decimal RemainingGas { get; set; }
    int PastDays;
    int RemainingDays;
    int TotalDays;
    private DateTime LastDate { get; set; }


    bool calculated;

    // Kullanıcı girdilerini hesaplama
    private async Task CalculateUsage()
    {
        if (gasReadings.Count > 0 && GasUsage != null)
        {

            // Ensure that gas readings contain only valid values
            if (gasReadings.Any(gr => gr.Value <= 0))
            {
                // Handle invalid data (e.g., negative or zero readings)
                Console.WriteLine("Invalid gas reading found. All values must be positive.");
                return;
            }
            // Date consistency check
            if (gasReadings.First().Date > gasReadings.Last().Date)
            {
                Console.WriteLine("Inconsistent date order. The first reading date should be earlier than the last reading.");
                return;
            }

            CurrentReading = gasReadings.Last().Value;
            InitialReading = gasReadings.First().Value;
            UsedGas = CurrentReading - InitialReading;
            
            // Ensure that the used gas value is not negative
            if (UsedGas < 0)
            {
                Console.WriteLine("Invalid data: the current reading is lower than the initial reading.");
                return;
            }
            
            MaxMeterValue = InitialReading + GasUsage.AnnualLimit;
            RemainingGas = MaxMeterValue - CurrentReading;

            // Prevent remaining gas from being negative
            RemainingGas = Math.Max(RemainingGas, 0);

            RemainingDays = (GasUsage.LastDate - DateTime.Today).Days;
            TotalDays = (GasUsage.LastDate - gasReadings.First().Date).Days;
            PastDays = (gasReadings.Last().Date - gasReadings.First().Date).Days;

            if (PastDays <= 0)
            {
                AverageUsedMeterValuePerDay = 0;
            }
            else
            {
                AverageUsedMeterValuePerDay = UsedGas / PastDays;
            }
            if (RemainingDays <= 0)
            {
                AverageRemainingMeterValuePerDay = 0;
            }
            else
            {
                AverageRemainingMeterValuePerDay = RemainingGas / RemainingDays;
            }

            calculated = true;
            await InvokeAsync(StateHasChanged);
        }

    }

    private async Task SaveAgreementDataToLocalStorage()
    {
        await DataAccess.SaveDataAsync(Constants.GasUsageKey, GasUsage);
        await LoadFromLocalStorage();
    }

    // localStorage'dan verileri yükle
    private async Task LoadFromLocalStorage()
    {

        GasUsageData gasUsageData = await DataAccess.GetDataAsync<GasUsageData>(Constants.GasUsageKey);
        gasReadings = await DataAccess.GetDataAsync<List<GasReading>>(Constants.GasReadingsKey) ?? new List<GasReading>();

        if (gasUsageData != null)
        {
            GasUsage.AnnualLimit = gasUsageData.AnnualLimit;
            GasUsage.LastDate = gasUsageData.LastDate;

            await CalculateUsage();

        }

        await InvokeAsync(StateHasChanged);
    }
    #endregion
}